generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(nanoid())
  avatarUrl         String
  mail              String            @unique
  username          String            @unique

  password          String?
  googleId          String?
  school42Id        String?
  doubleA           Boolean            @default(false)

  status            EStatus            @default(Online)
  languages         ELanguage          @default(English)
  level             Float              @default(0)
  userPresences     UserPresence[]

  ChannelOwners     Channel[]
  ChannelMembers    ChannelMember[]
  ChannelBlockeds   ChannelBlocked[]
  ChannelInviteds   ChannelInvited[]
  ChannelMessages   ChannelMessage[]

  userReceiver      PrivateMessage[]    @relation("userReceiver")
  userSender        PrivateMessage[]    @relation("userSender")
  userBlockeds      RelationBlocked[]   @relation("userBlocked")
  userBlocks        RelationBlocked[]   @relation("userBlock")

  relationFriendAs  RelationFriend[]    @relation("relationFriendA")
  relationFriendBs  RelationFriend[]    @relation("relationFriendB")
  requestReceivers  RelationRequests[]  @relation("requestReceiver")
  requestSenders    RelationRequests[]  @relation("requestSender")

  looser            GameStat[]          @relation("looserUser")
  winner            GameStat[]          @relation("winnerUser")

  createdAt         DateTime            @default(now())
}

model UserPresence {
  id              String    @id @default(nanoid())

  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  connectedAt     DateTime  @default(now())
  disconnectedAt  DateTime?
}

model RelationFriend {
  userAId String
  userBId String
  userA   User   @relation("relationFriendA", fields: [userAId], references: [id], onDelete: Cascade)
  userB   User   @relation("relationFriendB", fields: [userBId], references: [id], onDelete: Cascade)

  @@id([userAId, userBId])
}

model RelationRequests {
  userSenderId   String
  userReceiverId String
  userB          User   @relation("requestReceiver", fields: [userReceiverId], references: [id], onDelete: Cascade)
  userA          User   @relation("requestSender", fields: [userSenderId], references: [id], onDelete: Cascade)

  @@id([userSenderId, userReceiverId])
}

model RelationBlocked {
  userBlockingId String
  userBlockedId  String
  userB          User   @relation("userBlocked", fields: [userBlockedId], references: [id], onDelete: Cascade)
  userA          User   @relation("userBlock", fields: [userBlockingId], references: [id], onDelete: Cascade)

  @@id([userBlockingId, userBlockedId])
}

model Channel {
  id          String          @id @default(nanoid())
  name        String          @unique
  avatarUrl   String?
  topic       String?
  password    String?

  ownerId     String
  owner       User            @relation(fields: [ownerId], references: [id])

  maxUsers    Int             @default(50)
  type        EChannelType    @default(Public)

  members     ChannelMember[]
  blockedUser ChannelBlocked[]
  invitedUser ChannelInvited[]
  messages    ChannelMessage[]

  createdAt   DateTime        @default(now())
}


model ChannelBlocked {
  userId    String
  channelId String
  channel   Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, channelId])
}

model ChannelInvited {
  userId    String
  channelId String
  channel   Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, channelId])
}

model ChannelMember {
  avatarUrl String
  nickname  String

  userId    String
  channelId String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)

  type      EMemberType  @default(Member)
  muted     Boolean      @default(false)
  juskakan  DateTime?

  createdAt DateTime     @default(now())

  @@id([userId, channelId])
}

model ChannelMessage {
  id        String      @id @default(nanoid())

  senderId  String
  channelId String
  user      User        @relation(fields: [senderId], references: [id])
  channel   Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)

  content   String

  updatedAt DateTime?   @updatedAt
  createdAt DateTime    @default(now())
}

model PrivateMessage {
  id          String    @id @default(nanoid())

  senderId    String
  receiverId  String
  sender      User      @relation("userSender", fields: [senderId], references: [id])
  receiver    User      @relation("userReceiver", fields: [receiverId], references: [id])

  content    String

  updatedAt  DateTime?  @updatedAt
  createdAt  DateTime   @default(now())
}

model GameStat {
  id          String    @id @default(nanoid())

  winnerId    String?
  looserId    String?
  winner      User?     @relation("winnerUser", fields: [winnerId], references: [id], onDelete: SetNull)
  looser      User?     @relation("looserUser", fields: [looserId], references: [id], onDelete: SetNull)

  type        EGameType
  timePlayed  Int
  scoreWinner Int
  scoreLoser  Int

  createdAt   DateTime  @default(now())
}

enum EStatus {
  Online
  Invisble
  Idle
  DoNotDisturb
}

enum ELanguage {
  English
  French
  Spanish
}

enum EChannelType {
  Public
  Protected
}

enum EMemberType {
  Admin
  Member
}

enum EGameType {
  Classic
  Special
}
